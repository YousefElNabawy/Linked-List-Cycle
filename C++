class Solution {
public:
    bool hasCycle(ListNode *head) {
        if (!head || !head->next) {
            return false;  // No cycle if list is empty or has only one node
        }
        
        ListNode *slow = head;
        ListNode *fast = head->next;
        
        while (fast != slow) {
            if (!fast || !fast->next) {
                return false;  // Reached end of list, so no cycle
            }
            slow = slow->next;
            fast = fast->next->next;
        }
        
        return true;  // The fast pointer met the slow pointer, so there's a cycle
    }
};
